// App.jsx or App.js

import { useState, useEffect, useMemo, useRef } from 'react';
import Header from "@cloudscape-design/components/header";
import TextContent from "@cloudscape-design/components/text-content";
import './App.css';
import { AmazonConnectApp, AppContactScope } from "@amazon-connect/app";
import { ContactClient, AgentClient, AgentStateChangedEventData, ContactStartingAcwEventData } from "@amazon-connect/contact";
import Table from "@cloudscape-design/components/table";
import Link from "@cloudscape-design/components/link";
const connectApp = AmazonConnectApp.init({
    onCreate: (event) => {
        const { appInstanceId } = event.context;
        const { contactScope } = event.context;
        console.log('**** App initialized: ', appInstanceId);
        console.log("**** EVENT", event)
        console.log("**** length", event.context.appConfig.permissions.length)
        permissions = event.context.appConfig.permissions;
        contactId = event.context.contactScope.contactId
    },
    onDestroy: (event) => {
        console.log('**** App being destroyed');
    },
});
const excludedAttributes = [];

function App() {
    const [messages, setMessages] = useState([]);
    const socketRef = useRef(null);
    const contactId = "2689ac23-f9b5-4be6-93e7-659eb1e7e86c"; // Change as needed
    const excludedAttributes = [];
    const [acw, setACW] = useState(false)
    const [attributes, setAttributes] = useState(null);
    const [contactType, setContactType] = useState("");
    const [contactStateDuration, setContactStateDuration] = useState("");
    const [contactQueue, setContactQueue] = useState("");
    const [contactInitialContactId, setContactInitialContactId] = useState("")
    const [contactQueueTimestamp, setContactQueueTimestamp] = useState("");
    const [pollingIntervalId, setPollingIntervalId] = useState(null);
    const [lastContactId, setLastContactId] = useState(null);

    // INSTANTIATING AGENT/CONTACT CLIENTS
    const agentClient = new AgentClient();
    const contactClient = new ContactClient();

    // AGENT EVENT LISTENERS
    agentClient.onStateChanged(fetchAgentData);

    // CONTACT EVENT LISTENERS
    contactClient.onConnected(() => {
        fetchContactData();
    });
    contactClient.onMissed(fetchContactData);
    contactClient.onDestroyed(() => {
        contactId = null
        fetchContactData()
    });
    contactClient.onStartingAcw(doACW)

    const EATable = ({ attributes }) => {
        const isUrl = value => {
            try {
                const url = new URL(value);
                return url.protocol === "http:" || url.protocol === "https:";
            } catch {
                return false;
            }
        };
        let summaryExist = true
        if (attributes.AAText1) {
            summaryExist = true
        }
        console.log("**** EATable Attributes", attributes)

        const texts = attributes.AAText;
        const locations = attributes.AALocation
        const questions = attributes.AAQuestion
        console.log("**** Question", questions)
        console.log("**** Loc", locations)

        const summaryItems = [];
        summaryItems.push({ name: "Suggested Answer", value: texts });
        summaryItems.push({ name: "Reference", value: locations });

        const summaryColumnDefinitions = [
            {
                id: "name",
                header: "Question:",
                cell: item => item.name,
                width: 180
            },
            {
                id: "value",
                header: questions,
                cell: item =>
                    isUrl(item.value) ? (
                        <Link href={item.value} external>
                            {item.value}
                        </Link>
                    ) : (
                        item.value
                    ),
                wrap: true
            }
        ];
        return (
            <div>

                <Table
                    columnDefinitions={summaryColumnDefinitions}
                    columnDisplay={[
                        { id: 'name', visible: true, showHeader: false },
                        { id: 'value', visible: true, showHeader: false }
                    ]}
                    items={summaryItems}
                    wrapLines
                    header={<Header>Knowledge Base Results</Header>}
                    variant="embedded"
                />
            </div>
        );
    };

    const PCSTable = ({ attributes }) => {
        let notesExist = false
        if (attributes.PCSNote) {
            notesExist = true
        }
        let summaryExist = false
        if (attributes.PCSSummary1) {
            summaryExist = true
        }
        console.log("**** PCSTable Attributes", attributes)
        const summaryItems = useMemo(() => {
            return Object.entries(attributes)
                .filter(([key]) => !excludedAttributes.includes(key))
                .map(([key, { name, value }]) => ({
                    key,
                    name: name || '',
                    value: value || '',
                    size: "Large"
                }))
                .filter(item => item.name.startsWith("PCSSummary"));
        }, [attributes]);

        const actionItems = useMemo(() => {
            return Object.entries(attributes)
                .filter(([key]) => !excludedAttributes.includes(key))
                .map(([key, { name, value }]) => ({
                    key,
                    name: name || '',
                    value: value || '',
                    size: "Large"
                }))
                .filter(item => item.name.startsWith("PCSAction"));
        }, [attributes]);

        const noteItems = useMemo(() => {
            return Object.entries(attributes)
                .filter(([key]) => !excludedAttributes.includes(key))
                .map(([key, { name, value }]) => ({
                    key,
                    name: name || '',
                    value: value || '',
                    size: "Large"
                }))
                .filter(item => item.name.startsWith("PCSNote"));
        }, [attributes]);

        const summaryColumnDefinitions = [
            {
                id: 'value',
                header: 'Summary:',
                cell: item => item.value,
            },
        ];

        const actionColumnDefinitions = [
            {
                id: 'value',
                header: 'Actions:',
                cell: item => item.value,
            },
        ];
        const noteColumnDefinitions = [
            {
                id: 'value',
                header: 'Notes:',
                cell: item => item.value,
            },
        ];

        return (
            <div>
                {summaryExist ? <Table
                    columnDefinitions={summaryColumnDefinitions}
                    onSelectionChange={({ detail }) =>
                        console.log(detail)
                    }
                    items={summaryItems}
                    wrapLines
                    header={<Header>Post Call Summary</Header>}
                    variant="embedded"
                /> : null}
                {summaryExist ? <Table
                    columnDefinitions={actionColumnDefinitions}
                    onSelectionChange={({ detail }) =>
                        console.log(detail)
                    }
                    items={actionItems}
                    wrapLines
                    variant="embedded"
                /> : null}
                {notesExist ? <Table
                    columnDefinitions={noteColumnDefinitions}
                    onSelectionChange={({ detail }) =>
                        console.log(detail)
                    }
                    items={noteItems}
                    wrapLines
                    variant="embedded"
                /> : null}

            </div>
        );
    };
    async function fetchAgentData(AgentStateChangedEventData) {
        /*
            //  GET AGENT ARN
            const arn = await agentClient.getARN();
            setAgentARN(arn); // SET STATE
        
            //  GET AGENT NAME
            const name = await agentClient.getName();
            setAgentName(name) // SET STATE
        
            // GET AGENT STATE
            const currentState = await agentClient.getState();
            setAgentState(currentState.state.name) // SET STATE
        
            // GET AGENT ROUTING PROFILE
            const routingProfile = await agentClient.getRoutingProfile();
            setAgentRoutingProfile(routingProfile.routingProfile.name);
        
            // GET AGENT CHANNEL CONCURRENCY
            const channelConcurrency = await agentClient.getChannelConcurrency();
            setAgentChannelConcurrency((prevState) => {
              return ({
                ...prevState,
                VOICE: `${channelConcurrency.channelConcurrency.VOICE}`
              });
            });
            setAgentChannelConcurrency((prevState) => {
              return ({
                ...prevState,
                CHAT: channelConcurrency.channelConcurrency.CHAT
              });
            });
            setAgentChannelConcurrency((prevState) => {
              return ({
                ...prevState,
                TASK: channelConcurrency.channelConcurrency.TASK
              });
            });
        
            // OTHER AGENT DATA
            //const extension = await agentClient.getExtension();
            //const dialableCountries = await agentClient.getDialableCountries();
            */

    }
    // CONTACT DATA HANDLER
    async function fetchContactData() {

        if (!contactId) {
            console.warn("**** No contactId in eventData, skipping.");
            return;
        }
        setLastContactId(contactId);

        try {
            const attributesList = await contactClient.getAttributes(contactId, '*');
            setAttributes(attributesList);
            console.log("**** ATTRIBUTES", attributesList);

            const initialContactId = await contactClient.getInitialContactId(contactId);
            setContactInitialContactId(initialContactId);
            console.log("**** ICI", initialContactId);

            const type = await contactClient.getType(contactId);
            setContactType(type);
            console.log("**** Type", type);

            const stateDuration = await contactClient.getStateDuration(contactId);
            setContactStateDuration(stateDuration);
            console.log("**** State Duration", stateDuration);

            const queue = await contactClient.getQueue(contactId);
            if (queue.queue.name == null) {
                setContactQueue(`Agent Queue ${queue.queue.queueARN}`);
            } else {
                setContactQueue(queue.queue.name);
            }

            const queueTimestamp = await contactClient.getQueueTimestamp(contactId);
            setContactQueueTimestamp(JSON.stringify(queueTimestamp));
            console.log("**** QUEUE TIMESTAMP", queueTimestamp);

        } catch (err) {
            console.error("**** Failed to fetch contact data:", JSON.stringify(err, Object.getOwnPropertyNames(err)));
        }
    }
    async function doACW() {
        setACW(true)
        console.log("**** ACW")
    }

    useEffect(() => {
        // Connect to WebSocket
        const socket = new WebSocket("ws://localhost:3000");

        socketRef.current = socket;

        socket.onopen = () => {
            console.log("WebSocket connected");
            socket.send(JSON.stringify({ contactId }));
        };

        socket.onmessage = (event) => {
            const message = JSON.parse(event.data);
            setAttributes(message.attributes)

            console.log("Received:", message.attributes, message);
            setMessages((prev) => [...prev, message]);
        };

        socket.onclose = () => {
            console.log("WebSocket closed");
        };

        socket.onerror = (error) => {
            console.error("WebSocket error:", error);
        };

        return () => {
            socket.close();
        };
    }, []);

    return (
        <div className="App">
            <div style={{
                position: 'fixed',
                top: 0,
                left: 0,
                width: '100%',
                height: '20px',
                backgroundColor: '#077398',
                zIndex: 1000 // Ensures it stays above other content
            }}>
                {/* Content goes here */}
            </div>
            <div style={{ marginTop: '20px' }}>
                {attributes && <EATable attributes={attributes} />}
                {acw && attributes && <PCSTable attributes={attributes} />}
            </div>
            <br></br>


        </div >
    );
}

export default App;
